// Generated by view binder compiler. Do not edit!
package com.luizhenrique.muscle_hunger.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.luizhenrique.muscle_hunger.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemContentScreenOrderBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final View contentQuantityScreenOrder;

  @NonNull
  public final ImageView iconExcoScreenOrder;

  @NonNull
  public final ImageView iconSubtractScreenOrder;

  @NonNull
  public final ImageView iconSumScreenOrder;

  @NonNull
  public final ImageView imgItemScreenOrder;

  @NonNull
  public final TextView ingredientsItemsScreenOrder;

  @NonNull
  public final TextView priceItemScreenOrder;

  @NonNull
  public final TextView quantityItemScreenOrder;

  @NonNull
  public final TextView timeItemScreenOrder;

  @NonNull
  public final TextView titleItemScreenOrder;

  private ItemContentScreenOrderBinding(@NonNull RelativeLayout rootView,
      @NonNull View contentQuantityScreenOrder, @NonNull ImageView iconExcoScreenOrder,
      @NonNull ImageView iconSubtractScreenOrder, @NonNull ImageView iconSumScreenOrder,
      @NonNull ImageView imgItemScreenOrder, @NonNull TextView ingredientsItemsScreenOrder,
      @NonNull TextView priceItemScreenOrder, @NonNull TextView quantityItemScreenOrder,
      @NonNull TextView timeItemScreenOrder, @NonNull TextView titleItemScreenOrder) {
    this.rootView = rootView;
    this.contentQuantityScreenOrder = contentQuantityScreenOrder;
    this.iconExcoScreenOrder = iconExcoScreenOrder;
    this.iconSubtractScreenOrder = iconSubtractScreenOrder;
    this.iconSumScreenOrder = iconSumScreenOrder;
    this.imgItemScreenOrder = imgItemScreenOrder;
    this.ingredientsItemsScreenOrder = ingredientsItemsScreenOrder;
    this.priceItemScreenOrder = priceItemScreenOrder;
    this.quantityItemScreenOrder = quantityItemScreenOrder;
    this.timeItemScreenOrder = timeItemScreenOrder;
    this.titleItemScreenOrder = titleItemScreenOrder;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemContentScreenOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemContentScreenOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_content_screen_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemContentScreenOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.content_quantity_screen_order;
      View contentQuantityScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (contentQuantityScreenOrder == null) {
        break missingId;
      }

      id = R.id.icon_exco_screen_order;
      ImageView iconExcoScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (iconExcoScreenOrder == null) {
        break missingId;
      }

      id = R.id.icon_subtract_screen_order;
      ImageView iconSubtractScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (iconSubtractScreenOrder == null) {
        break missingId;
      }

      id = R.id.icon_sum_screen_order;
      ImageView iconSumScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (iconSumScreenOrder == null) {
        break missingId;
      }

      id = R.id.img_item_screen_order;
      ImageView imgItemScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (imgItemScreenOrder == null) {
        break missingId;
      }

      id = R.id.ingredients_items_screen_order;
      TextView ingredientsItemsScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (ingredientsItemsScreenOrder == null) {
        break missingId;
      }

      id = R.id.price_item_screen_order;
      TextView priceItemScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (priceItemScreenOrder == null) {
        break missingId;
      }

      id = R.id.quantity_item_screen_order;
      TextView quantityItemScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (quantityItemScreenOrder == null) {
        break missingId;
      }

      id = R.id.time_item_screen_order;
      TextView timeItemScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (timeItemScreenOrder == null) {
        break missingId;
      }

      id = R.id.title_item_screen_order;
      TextView titleItemScreenOrder = ViewBindings.findChildViewById(rootView, id);
      if (titleItemScreenOrder == null) {
        break missingId;
      }

      return new ItemContentScreenOrderBinding((RelativeLayout) rootView,
          contentQuantityScreenOrder, iconExcoScreenOrder, iconSubtractScreenOrder,
          iconSumScreenOrder, imgItemScreenOrder, ingredientsItemsScreenOrder, priceItemScreenOrder,
          quantityItemScreenOrder, timeItemScreenOrder, titleItemScreenOrder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
